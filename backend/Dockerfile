# --- Stage 1: Test Stage ---
# This stage contains the full Go toolchain and source code,
# used for running both unit and integration tests.
FROM golang:1.24-alpine AS test-stage

WORKDIR /app

# Copy dependency files and download them.
# This leverages Docker's layer caching.
COPY backend/go.mod backend/go.sum ./
RUN go mod download
RUN go mod verify

# Copy the rest of the source code
COPY backend/ .


# --- Stage 2: Builder Stage ---
# This stage builds the production binary, using the test stage as a base
# to reuse the downloaded dependencies.
FROM test-stage AS builder

# Generate Swagger API documentation
RUN go install github.com/swaggo/swag/cmd/swag@latest
RUN swag init -g main.go

# Remove incompatible LeftDelim and RightDelim fields from generated docs
# These fields are generated by swag but are not compatible with the current swag library version
RUN sed -i '/LeftDelim:/d' docs/docs.go
RUN sed -i '/RightDelim:/d' docs/docs.go

# Build the application binary.
# The flags -w -s strip debug information, making the binary smaller.
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o /hydro-habitat-server ./main.go


# --- Stage 3: Final Production Stage ---
# This stage creates the final, minimal, and secure production image.
# We'll use Alpine instead of distroless to include basic tools for health checks
FROM alpine:latest AS final-stage

# Install curl for health checks and ca-certificates for SSL
RUN apk --no-cache add curl ca-certificates

WORKDIR /

# Copy the built binary from the 'builder' stage
COPY --from=builder /hydro-habitat-server /hydro-habitat-server

# Copy the generated Swagger docs from the 'builder' stage
COPY --from=builder /app/docs /docs

# Create a non-root user
RUN adduser -D -s /bin/sh appuser
USER appuser

EXPOSE 8080
ENTRYPOINT ["/hydro-habitat-server"]