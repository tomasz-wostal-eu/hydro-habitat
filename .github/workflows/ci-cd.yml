<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 7e9081b (fix: add new pipeline)
=======
>>>>>>> 3b450c8 (New pipleline helm (#39))
name: CI/CD Pipeline

on:
  push:
<<<<<<< HEAD
<<<<<<< HEAD
    branches: [main, dev, develop]
  pull_request:
    branches: [main, dev, develop]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
=======
=======
>>>>>>> 3b450c8 (New pipleline helm (#39))
    branches: [main, qa, dev, develop]
  pull_request:
    branches: [main, qa, dev, develop]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 7e9081b (fix: add new pipeline)
=======
  packages: write
>>>>>>> 8fdec38 (fix: add new pipeline)
=======
  packages: write
>>>>>>> 3b450c8 (New pipleline helm (#39))

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine environment and deployment target
  environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy: ${{ steps.env.outputs.deploy }}
      version-type: ${{ steps.env.outputs.version-type }}
      k8s-namespace: ${{ steps.env.outputs.k8s-namespace }}
    steps:
      - name: Determine deployment environment
        id: env
        run: |
          case "${{ github.ref_name }}" in
            "main")
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "deploy=true" >> $GITHUB_OUTPUT
              echo "version-type=release" >> $GITHUB_OUTPUT
              echo "k8s-namespace=hydro-habitat-prod" >> $GITHUB_OUTPUT
              ;;
            "qa")
              echo "environment=qa" >> $GITHUB_OUTPUT
              echo "deploy=true" >> $GITHUB_OUTPUT
              echo "version-type=prerelease" >> $GITHUB_OUTPUT
              echo "k8s-namespace=hydro-habitat-qa" >> $GITHUB_OUTPUT
              ;;
            "dev")
              echo "environment=development" >> $GITHUB_OUTPUT
              echo "deploy=true" >> $GITHUB_OUTPUT
              echo "version-type=prerelease" >> $GITHUB_OUTPUT
              echo "k8s-namespace=hydro-habitat-dev" >> $GITHUB_OUTPUT
              ;;
            "develop")
              echo "environment=local" >> $GITHUB_OUTPUT
              echo "deploy=true" >> $GITHUB_OUTPUT
              echo "version-type=pre-prerelease" >> $GITHUB_OUTPUT
              echo "k8s-namespace=hydro-habitat-local" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "environment=none" >> $GITHUB_OUTPUT
              echo "deploy=false" >> $GITHUB_OUTPUT
              echo "version-type=none" >> $GITHUB_OUTPUT
              echo "k8s-namespace=none" >> $GITHUB_OUTPUT
              ;;
          esac

  # Determine what changed to run only necessary jobs
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      docker: ${{ steps.filter.outputs.docker }}
      k8s: ${{ steps.filter.outputs.k8s }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'Makefile'
              - '.github/workflows/**'
            frontend:
              - 'frontend/**'
              - 'package*.json'
              - '.github/workflows/**'
            docker:
              - 'docker-compose.yaml'
              - '**/Dockerfile*'
              - '.github/workflows/**'
            k8s:
              - 'k8s/**'
              - 'helm/**'
              - '.github/workflows/**'

<<<<<<< HEAD
<<<<<<< HEAD
  # Get PR number for development builds
  pr-number:
    name: Get PR Number
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      number: ${{ steps.pr.outputs.number }}
    steps:
      - name: Get PR number
        id: pr
        run: echo "number=${{ github.event.number }}" >> $GITHUB_OUTPUT

=======
>>>>>>> 7e9081b (fix: add new pipeline)
=======
>>>>>>> 3b450c8 (New pipleline helm (#39))
  # Backend quality checks
  # Note: All backend operations use Docker containers, not host Go installation
  backend-quality:
    name: Backend Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run backend linting
        run: make lint-backend

      - name: Run backend security scan
        run: make security-backend

  # Backend tests
  # Note: All backend operations use Docker containers, not host Go installation
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run unit tests
        run: make test-unit

      - name: Run integration tests with Docker Compose
        env:
          CI: true
        run: make test-integration

  # Frontend quality checks
  frontend-quality:
    name: Frontend Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci --legacy-peer-deps

      - name: Run frontend linting
        run: make lint-frontend

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test:run

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  # Docker build and push
=======
  # Docker build and test
>>>>>>> 7e9081b (fix: add new pipeline)
=======
  # Docker build and push
>>>>>>> 9679ede (fix: add new pipeline)
=======
  # Docker build and push
>>>>>>> 3b450c8 (New pipleline helm (#39))
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [environment, backend-quality, backend-tests, frontend-quality]
    if: |
      always() && 
      (needs.backend-quality.result == 'success' || needs.backend-quality.result == 'skipped') &&
      (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped') &&
      (needs.frontend-quality.result == 'success' || needs.frontend-quality.result == 'skipped')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

=======
>>>>>>> 7e9081b (fix: add new pipeline)
      - name: Build images
        run: |
          docker compose build --parallel
          echo "✅ Docker images built successfully"
=======
=======
>>>>>>> 3b450c8 (New pipleline helm (#39))
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request' && github.repository == 'tomasz-wostal-eu/hydro-habitat'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check registry permissions
        if: github.event_name != 'pull_request' && github.repository == 'tomasz-wostal-eu/hydro-habitat'
        run: |
          echo "Checking if we can authenticate to GHCR..."
          # Test authentication by trying to pull a public image
          docker pull ghcr.io/actions/runner:latest || echo "Registry access test completed"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-,enable={{is_default_branch}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' && github.repository == 'tomasz-wostal-eu/hydro-habitat' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 9679ede (fix: add new pipeline)
=======
          # Build locally even if we can't push to registry
          load: ${{ !(github.event_name != 'pull_request' && github.repository == 'tomasz-wostal-eu/hydro-habitat') }}
>>>>>>> 8fdec38 (fix: add new pipeline)
=======
          # Build locally even if we can't push to registry
          load: ${{ !(github.event_name != 'pull_request' && github.repository == 'tomasz-wostal-eu/hydro-habitat') }}
>>>>>>> 3b450c8 (New pipleline helm (#39))

      - name: Test image startup
        run: |
          docker compose up -d
<<<<<<< HEAD
<<<<<<< HEAD
          sleep 30
          
          # Test backend health
          curl -f http://localhost:8080/health || exit 1
          
          # Test frontend availability
          curl -f http://localhost:3000 || exit 1
          
          docker compose down
          echo "✅ Images tested successfully"

  # Semantic release and versioning
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      contains(fromJson('["main", "dev", "develop"]'), github.ref_name)
    needs: [docker-build, pr-number]
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install semantic-release
        run: |
          npm install -g semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/github \
            @semantic-release/git \
            conventional-changelog-conventionalcommits

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  # Update project version files
  update-project:
    name: Update Project Versions
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.result == 'success'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT

      - name: Update VERSION file
        run: |
          echo "${{ steps.get_tag.outputs.version }}" > VERSION
          git add VERSION

      - name: Update frontend package.json
        run: |
          cd frontend
          npm version ${{ steps.get_tag.outputs.version }} --no-git-tag-version
          git add package.json package-lock.json

      - name: Commit version updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "chore: update version files to ${{ steps.get_tag.outputs.version }} [skip ci]" || exit 0
          git push origin ${{ github.ref_name }}
=======
>>>>>>> 05d24d2 (wip)
=======
=======
>>>>>>> 3b450c8 (New pipleline helm (#39))
          
          # Wait for services to be ready with retries
          echo "Waiting for backend to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:80/health > /dev/null 2>&1; then
              echo "✅ Backend is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Backend failed to start"
              docker compose logs backend
              exit 1
            fi
            sleep 2
          done
          
          echo "Waiting for frontend to be ready..."
          for i in {1..30}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:80 2>/dev/null || echo "000")
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Frontend is ready (HTTP $HTTP_CODE)"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Frontend failed to start after 30 attempts"
              echo "Last HTTP response code: $HTTP_CODE"
              echo "Frontend logs:"
              docker compose logs frontend
              echo "Testing frontend connection:"
              curl -v http://localhost:80 || true
              exit 1
            fi
            echo "Attempt $i/30: Frontend not ready (HTTP $HTTP_CODE), waiting..."
            sleep 2
          done
          
          docker compose down
          echo "✅ Images tested successfully"
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 7e9081b (fix: add new pipeline)
=======
>>>>>>> 708bdca (Develop (#36))
=======
=======
>>>>>>> 3b450c8 (New pipleline helm (#39))

  # Semantic release and versioning
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      contains(fromJson('["main", "qa", "dev", "develop"]'), github.ref_name)
    needs: [environment, docker-build]
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
      new-release-git-tag: ${{ steps.semantic.outputs.new-release-git-tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install semantic-release
        run: |
          npm install -g semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/github \
            @semantic-release/git \
            @semantic-release/exec \
            conventional-changelog-conventionalcommits

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": [
              "+([0-9])?(.{+([0-9]),x}).x",
              "main",
              {
                "name": "qa",
                "prerelease": "rc"
              },
              {
                "name": "dev", 
                "prerelease": "alpha"
              },
              {
                "name": "develop",
                "prerelease": "dev"
              }
            ],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "echo '${nextRelease.version}' > VERSION"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md", "VERSION", "frontend/package.json", "frontend/package-lock.json"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ]
          }
          EOF

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run=false | tee release-output.txt
          if grep -q "Published release" release-output.txt; then
            echo "new-release-published=true" >> $GITHUB_OUTPUT
            VERSION=$(grep "Published release" release-output.txt | sed -n 's/.*Published release \([^ ]*\).*/\1/p')
            echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT
            echo "new-release-git-tag=v$VERSION" >> $GITHUB_OUTPUT
          else
            echo "new-release-published=false" >> $GITHUB_OUTPUT
          fi

  # Update issue tracking
  update-issues:
    name: Update Issue Tracking
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [environment, release]
    steps:
      - uses: actions/checkout@v4

      - name: Extract issue numbers from commit messages
        id: issues
        run: |
          # Extract issue numbers from commit messages (supports #123, fixes #123, closes #123, etc.)
          git log --oneline ${{ github.event.before }}..${{ github.sha }} | \
          grep -oE '(fix|fixes|close|closes|resolve|resolves|#)[[:space:]]*#?([0-9]+)' | \
          grep -oE '[0-9]+' | sort -u > issue_numbers.txt || true
          
          if [ -s issue_numbers.txt ]; then
            echo "issues=$(cat issue_numbers.txt | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
            echo "has-issues=true" >> $GITHUB_OUTPUT
          else
            echo "has-issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Update issues
        if: steps.issues.outputs.has-issues == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS=',' read -ra ISSUE_ARRAY <<< "${{ steps.issues.outputs.issues }}"
          for issue in "${ISSUE_ARRAY[@]}"; do
            if [ ! -z "$issue" ]; then
              echo "Updating issue #$issue"
              gh issue comment $issue --body "🚀 This issue has been addressed in commit ${{ github.sha }} and deployed to ${{ needs.environment.outputs.environment }} environment."
              
              # Close issue if this is main branch (production)
              if [ "${{ github.ref_name }}" = "main" ]; then
                gh issue close $issue --comment "✅ Resolved in production release ${{ needs.release.outputs.new-release-version }}"
              fi
            fi
          done

  # Deploy to Kubernetes
  deploy:
    name: Deploy to Kubernetes
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    runs-on: self-hosted
=======
    runs-on: ubuntu-latest
>>>>>>> 3b450c8 (New pipleline helm (#39))
=======
    runs-on: ubuntu-latest
>>>>>>> ae73b73 (fix: add new pipeline #34)
=======
    runs-on: self-hosted
>>>>>>> 16fb112 (New pipleline helm (#40))
    needs: [environment, release, docker-build]
    if: |
      false &&
      needs.environment.outputs.deploy == 'true' && 
      github.event_name == 'push' &&
      (needs.release.outputs.new-release-published == 'true' || github.ref_name == 'develop')
    environment:
      name: ${{ needs.environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 16fb112 (New pipleline helm (#40))
        run: |
          # Check if Helm is already installed on self-hosted runner
          if command -v helm &> /dev/null; then
            echo "Helm is already installed:"
            helm version
          else
            echo "Installing Helm..."
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          fi
<<<<<<< HEAD

      - name: Set up kubectl
        run: |
          # Check if kubectl is already installed on self-hosted runner
          if command -v kubectl &> /dev/null; then
            echo "kubectl is already installed:"
            kubectl version --client
          else
            echo "Installing kubectl..."
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi

      - name: Configure kubectl for self-hosted runner
        run: |
          echo "Configuring kubectl for ${{ needs.environment.outputs.environment }} environment..."
          
          # Option 1: Use existing kubeconfig on self-hosted runner
          if [ -f ~/.kube/config ]; then
            echo "Using existing kubeconfig at ~/.kube/config"
            kubectl config current-context
          elif [ -n "$KUBECONFIG" ] && [ -f "$KUBECONFIG" ]; then
            echo "Using kubeconfig from KUBECONFIG env var: $KUBECONFIG"
            kubectl config current-context
          else
            echo "No kubeconfig found. Checking for stored kubeconfig..."
            
            # Option 2: Use kubeconfig from GitHub secrets
            if [ -n "${{ secrets.KUBECONFIG }}" ]; then
              echo "Setting up kubeconfig from GitHub secrets..."
              mkdir -p ~/.kube
              echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
              chmod 600 ~/.kube/config
            else
              echo "Error: No Kubernetes configuration found!"
              echo "Please either:"
              echo "1. Set up kubectl on your self-hosted runner"
              echo "2. Add KUBECONFIG as a GitHub secret (base64 encoded)"
              exit 1
            fi
          fi
          
          # Verify kubectl is working
          echo "Testing Kubernetes connection..."
          kubectl version --client
          kubectl cluster-info
          
          # Check if we can access the cluster
          kubectl get nodes || {
            echo "Error: Cannot access Kubernetes cluster"
            echo "Current context: $(kubectl config current-context)"
            echo "Available contexts:"
            kubectl config get-contexts
            exit 1
          }
          
          echo "✅ Kubernetes configuration successful"
=======
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'
=======
>>>>>>> 16fb112 (New pipleline helm (#40))

      - name: Set up kubectl
        run: |
          # Check if kubectl is already installed on self-hosted runner
          if command -v kubectl &> /dev/null; then
            echo "kubectl is already installed:"
            kubectl version --client
          else
            echo "Installing kubectl..."
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi

      - name: Configure kubectl for self-hosted runner
        run: |
<<<<<<< HEAD
          # Configure kubectl for remote clusters
          echo "Configuring kubectl for ${{ needs.environment.outputs.environment }} cluster..."
          # Add your remote cluster configuration here
          # Example: echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
>>>>>>> 3b450c8 (New pipleline helm (#39))

=======
          echo "Configuring kubectl for ${{ needs.environment.outputs.environment }} environment..."
          
          # Option 1: Use existing kubeconfig on self-hosted runner
          if [ -f ~/.kube/config ]; then
            echo "Using existing kubeconfig at ~/.kube/config"
            kubectl config current-context
          elif [ -n "$KUBECONFIG" ] && [ -f "$KUBECONFIG" ]; then
            echo "Using kubeconfig from KUBECONFIG env var: $KUBECONFIG"
            kubectl config current-context
          else
            echo "No kubeconfig found. Checking for stored kubeconfig..."
            
            # Option 2: Use kubeconfig from GitHub secrets
            if [ -n "${{ secrets.KUBECONFIG }}" ]; then
              echo "Setting up kubeconfig from GitHub secrets..."
              mkdir -p ~/.kube
              echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
              chmod 600 ~/.kube/config
            else
              echo "Error: No Kubernetes configuration found!"
              echo "Please either:"
              echo "1. Set up kubectl on your self-hosted runner"
              echo "2. Add KUBECONFIG as a GitHub secret (base64 encoded)"
              exit 1
            fi
          fi
          
          # Verify kubectl is working
          echo "Testing Kubernetes connection..."
          kubectl version --client
          kubectl cluster-info
          
          # Check if we can access the cluster
          kubectl get nodes || {
            echo "Error: Cannot access Kubernetes cluster"
            echo "Current context: $(kubectl config current-context)"
            echo "Available contexts:"
            kubectl config get-contexts
            exit 1
          }
          
          echo "✅ Kubernetes configuration successful"
          
>>>>>>> 16fb112 (New pipleline helm (#40))
      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ needs.environment.outputs.k8s-namespace }} --dry-run=client -o yaml | kubectl apply -f -

<<<<<<< HEAD
<<<<<<< HEAD
      - name: Configure Docker registry access for Kubernetes
        run: |
          # Configure image pull secrets for the namespace
          NAMESPACE="${{ needs.environment.outputs.k8s-namespace }}"
          
          # Remove existing secret if it exists (to update credentials)
          kubectl delete secret regcred -n $NAMESPACE --ignore-not-found=true
          
          # Create Docker registry secret for GHCR access
          echo "Creating Docker registry secret for GHCR access..."
          kubectl create secret docker-registry regcred \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=$NAMESPACE
          
          # Patch the default service account to use the image pull secret
          kubectl patch serviceaccount default -n $NAMESPACE \
            -p '{"imagePullSecrets": [{"name": "regcred"}]}'
          
          echo "✅ Docker registry access configured"

<<<<<<< HEAD
=======
>>>>>>> 3b450c8 (New pipleline helm (#39))
      - name: Deploy with Helm
=======
      - name: Deploy with Argo Rollouts
>>>>>>> ae73b73 (fix: add new pipeline #34)
        id: deploy
<<<<<<< HEAD
=======
      - name: Configure Docker registry access for Kubernetes
>>>>>>> 16fb112 (New pipleline helm (#40))
        run: |
          # Configure image pull secrets for the namespace
          NAMESPACE="${{ needs.environment.outputs.k8s-namespace }}"
          
          # Remove existing secret if it exists (to update credentials)
          kubectl delete secret regcred -n $NAMESPACE --ignore-not-found=true
          
          # Create Docker registry secret for GHCR access
          echo "Creating Docker registry secret for GHCR access..."
          kubectl create secret docker-registry regcred \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=$NAMESPACE
          
          # Patch the default service account to use the image pull secret
          kubectl patch serviceaccount default -n $NAMESPACE \
            -p '{"imagePullSecrets": [{"name": "regcred"}]}'
          
          echo "✅ Docker registry access configured"
          echo "Deploying version: ${VERSION}"
          echo "Namespace: ${{ needs.environment.outputs.k8s-namespace }}"
          echo "Environment: ${{ needs.environment.outputs.environment }}"
          
          # Check if Helm chart exists
          if [ ! -d "./helm/hydro-habitat" ]; then
            echo "Error: Helm chart not found at ./helm/hydro-habitat"
            exit 1
          fi
          
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          echo "Deploying version: ${VERSION}"
=======
=======
        run: |
          # Set version for deployment
          if [ "${{ needs.release.outputs.new-release-published }}" = "true" ]; then
            VERSION="${{ needs.release.outputs.new-release-version }}"
          else
            VERSION="${{ github.ref_name }}-${{ github.sha }}"
          fi
          
>>>>>>> 253cb0f (fix: add new pipeline #34)
          echo "Preparing Argo Rollouts deployment for version: ${VERSION}"
>>>>>>> ae73b73 (fix: add new pipeline #34)
          echo "Namespace: ${{ needs.environment.outputs.k8s-namespace }}"
          echo "Environment: ${{ needs.environment.outputs.environment }}"
          
          # Check if Helm chart exists
          if [ ! -d "./helm/hydro-habitat" ]; then
            echo "Error: Helm chart not found at ./helm/hydro-habitat"
            exit 1
          fi
          
          # Validate Helm chart
          helm lint ./helm/hydro-habitat
          
<<<<<<< HEAD
=======
>>>>>>> 3b450c8 (New pipleline helm (#39))
          # Deploy using Helm
          helm upgrade --install hydro-habitat ./helm/hydro-habitat \
=======
          # Check if Argo Rollouts is installed
          if ! kubectl get crd rollouts.argoproj.io &>/dev/null; then
            echo "Warning: Argo Rollouts CRD not found. Installing Argo Rollouts..."
            kubectl create namespace argo-rollouts --dry-run=client -o yaml | kubectl apply -f -
            kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
            
            # Wait for Argo Rollouts to be ready
            kubectl wait --for=condition=available --timeout=300s deployment/argo-rollouts-controller -n argo-rollouts
          fi
          
          # Generate Helm template with Rollout instead of Deployment
          helm template hydro-habitat ./helm/hydro-habitat \
>>>>>>> ae73b73 (fix: add new pipeline #34)
            --namespace ${{ needs.environment.outputs.k8s-namespace }} \
            --set image.tag=${VERSION} \
            --set environment=${{ needs.environment.outputs.environment }} \
            --set ingress.enabled=true \
            --set ingress.hosts[0].host=hydro-habitat-${{ needs.environment.outputs.environment }}.local \
<<<<<<< HEAD
<<<<<<< HEAD
            --wait --timeout=10m \
            --debug
=======
            --set rollout.enabled=true \
            --output-dir ./rendered-manifests
          
          # Apply the manifests (Argo Rollouts will handle the deployment)
          kubectl apply -f ./rendered-manifests/hydro-habitat/templates/ -n ${{ needs.environment.outputs.k8s-namespace }}
          
          # Wait for rollout to complete
          echo "Waiting for Argo Rollout to complete..."
          kubectl wait --for=condition=Progressing --timeout=600s rollout/hydro-habitat -n ${{ needs.environment.outputs.k8s-namespace }} || true
          kubectl wait --for=condition=Available --timeout=600s rollout/hydro-habitat -n ${{ needs.environment.outputs.k8s-namespace }}
>>>>>>> ae73b73 (fix: add new pipeline #34)
          
          # Verify deployment
          echo "Verifying Argo Rollout deployment..."
          kubectl get rollouts -n ${{ needs.environment.outputs.k8s-namespace }}
          kubectl describe rollout hydro-habitat -n ${{ needs.environment.outputs.k8s-namespace }}
          kubectl get pods -n ${{ needs.environment.outputs.k8s-namespace }}
          kubectl get services -n ${{ needs.environment.outputs.k8s-namespace }}
          kubectl get ingress -n ${{ needs.environment.outputs.k8s-namespace }}
          
          # Get deployment URL
          INGRESS_HOST=$(kubectl get ingress -n ${{ needs.environment.outputs.k8s-namespace }} -o jsonpath='{.items[0].spec.rules[0].host}' 2>/dev/null)
          if [ -n "$INGRESS_HOST" ]; then
            echo "url=https://${INGRESS_HOST}" >> $GITHUB_OUTPUT
            echo "Application deployed at: https://${INGRESS_HOST}"
          else
            echo "Warning: No ingress found, application may be accessible via service"
            SERVICE_IP=$(kubectl get service -n ${{ needs.environment.outputs.k8s-namespace }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [ -n "$SERVICE_IP" ]; then
              echo "url=http://${SERVICE_IP}" >> $GITHUB_OUTPUT
              echo "Application deployed at: http://${SERVICE_IP}"
            fi
          fi
<<<<<<< HEAD
=======
            --wait --timeout=10m
          
          # Get deployment URL
          INGRESS_HOST=$(kubectl get ingress -n ${{ needs.environment.outputs.k8s-namespace }} -o jsonpath='{.items[0].spec.rules[0].host}')
          echo "url=https://${INGRESS_HOST}" >> $GITHUB_OUTPUT
>>>>>>> 3b450c8 (New pipleline helm (#39))
=======
>>>>>>> ae73b73 (fix: add new pipeline #34)
          
=======
          # Validate Helm chart
          helm lint ./helm/hydro-habitat
            --wait --timeout=10m \
            --debug
          
          # Verify deployment
          kubectl get pods -n ${{ needs.environment.outputs.k8s-namespace }}
          kubectl get services -n ${{ needs.environment.outputs.k8s-namespace }}
          kubectl get ingress -n ${{ needs.environment.outputs.k8s-namespace }}
          
          # Get deployment URL
          INGRESS_HOST=$(kubectl get ingress -n ${{ needs.environment.outputs.k8s-namespace }} -o jsonpath='{.items[0].spec.rules[0].host}' 2>/dev/null)
          if [ -n "$INGRESS_HOST" ]; then
            echo "url=https://${INGRESS_HOST}" >> $GITHUB_OUTPUT
            echo "Application deployed at: https://${INGRESS_HOST}"
          else
            echo "Warning: No ingress found, application may be accessible via service"
            SERVICE_IP=$(kubectl get service -n ${{ needs.environment.outputs.k8s-namespace }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [ -n "$SERVICE_IP" ]; then
              echo "url=http://${SERVICE_IP}" >> $GITHUB_OUTPUT
              echo "Application deployed at: http://${SERVICE_IP}"
            fi
          fi
>>>>>>> 16fb112 (New pipleline helm (#40))
          echo "✅ Deployed to ${{ needs.environment.outputs.environment }} environment"

      - name: Run smoke tests
        run: |
          # Add smoke tests for the deployed application
<<<<<<< HEAD
          echo "Running smoke tests against deployed application..."
          # kubectl run smoke-test --image=appropriate/curl --rm -i --restart=Never -- curl -f ${{ steps.deploy.outputs.url }}/health
<<<<<<< HEAD
>>>>>>> 9679ede (fix: add new pipeline)
=======
>>>>>>> 60831a8 (Create new pipeline (#35))
=======
=======
          echo "Running smoke tests against Argo Rollouts deployment..."
          
          # Wait for rollout to be fully available
          kubectl wait --for=condition=Available --timeout=300s rollout/hydro-habitat -n ${{ needs.environment.outputs.k8s-namespace }}
          
          # Get the service endpoint
          if [ -n "${{ steps.deploy.outputs.url }}" ]; then
            ENDPOINT="${{ steps.deploy.outputs.url }}"
          else
            # Fallback to service endpoint
            SERVICE_IP=$(kubectl get service hydro-habitat-stable -n ${{ needs.environment.outputs.k8s-namespace }} -o jsonpath='{.spec.clusterIP}' 2>/dev/null)
            ENDPOINT="http://${SERVICE_IP}:80"
          fi
          
          echo "Testing endpoint: $ENDPOINT"
          
          # Run basic health check
          kubectl run smoke-test-${{ github.run_id }} --image=curlimages/curl --rm -i --restart=Never \
            --namespace=${{ needs.environment.outputs.k8s-namespace }} \
            -- curl -f "$ENDPOINT/health" --max-time 30
          
          echo "✅ Smoke tests completed successfully"
>>>>>>> ae73b73 (fix: add new pipeline #34)

>>>>>>> 3b450c8 (New pipleline helm (#39))
